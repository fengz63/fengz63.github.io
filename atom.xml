<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Feng&#39;s Tech Blogs</title>
  
  <subtitle>代码与生活</subtitle>
  <link href="http://zfeng.github.io/atom.xml" rel="self"/>
  
  <link href="http://zfeng.github.io/"/>
  <updated>2025-08-22T12:54:28.427Z</updated>
  <id>http://zfeng.github.io/</id>
  
  <author>
    <name>fengcode</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>client-go 源码解读（二）List and Watch机制</title>
    <link href="http://zfeng.github.io/article/ffd9098a39e7/"/>
    <id>http://zfeng.github.io/article/ffd9098a39e7/</id>
    <published>2025-08-21T21:37:33.000Z</published>
    <updated>2025-08-22T12:54:28.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>Kubernetes 中所有的API对象都是存储在Etcd中，且只能通过kube-apiserver访问。当访问量很大时，kube-apiserver会不堪重负。</p><p>基于上述考虑，kubernetes 中引入了一个Informer机制，本质上是在内存中维护一个高效的缓存，客户端的读写请求都可以通过缓存实现，而不必全部穿透到kube-apiserver。</p><span id="more"></span><p>Kubernetes实现这一高效缓存的核心就是 list 和 watch机制。在 Informer 启动时先执行 List() 操作，从而获取Etcd中全量资源，并缓存到本地；之后 Informer 启动 Watch() 操作，通过与kube-apiserver的长连接来持续接收指定资源的创建、更新和删除事件。这构成了一个发布-订阅模式，客户端通过List操作获取当前状态后，再发起Watch请求来订阅后续变更。这种机制可以避免客户端反复的 List 操作的开销，大大提高了效率，降低kube-apiserver的负载。</p><h2 id="2-ListerWatcher"><a href="#2-ListerWatcher" class="headerlink" title="2. ListerWatcher"></a>2. ListerWatcher</h2><p>ListerWatcher 是 lister 和 watcher 的结合体，前者负责列举全量对象，后者负责监视对象的增量变化。作为 Reflector 的一个主要能力提供者，ListerWatcher 在kubernetes中发挥了至关重要的作用。</p><h3 id="2-1-ListerWatcher-对象的创建"><a href="#2-1-ListerWatcher-对象的创建" class="headerlink" title="2.1 ListerWatcher 对象的创建"></a>2.1 ListerWatcher 对象的创建</h3><p>ListerWatcher对应的心间实例函数如下（代码见：<a href="https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/client-go/tools/cache/listwatch.go">listwatch.go</a>）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewListWatchFromClient</span><span class="params">(c Getter, resource <span class="type">string</span>, namespace <span class="type">string</span>, fieldSelector fields.Selector)</span></span> *ListWatch &#123;</span><br><span class="line">optionsModifier := <span class="function"><span class="keyword">func</span><span class="params">(options *metav1.ListOptions)</span></span> &#123;</span><br><span class="line">options.FieldSelector = fieldSelector.String()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> NewFilteredListWatchFromClient(c, resource, namespace, optionsModifier)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其主要逻辑见下面函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFilteredListWatchFromClient</span><span class="params">(c Getter, resource <span class="type">string</span>, namespace <span class="type">string</span>, optionsModifier <span class="keyword">func</span>(options *metav1.ListOptions)</span></span>) *ListWatch &#123;</span><br><span class="line">listFunc := <span class="function"><span class="keyword">func</span><span class="params">(options metav1.ListOptions)</span></span> (runtime.Object, <span class="type">error</span>) &#123;</span><br><span class="line">optionsModifier(&amp;options)</span><br><span class="line"><span class="keyword">return</span> c.Get().</span><br><span class="line">Namespace(namespace).</span><br><span class="line">Resource(resource).</span><br><span class="line">VersionedParams(&amp;options, metav1.ParameterCodec).</span><br><span class="line">Do(context.Background()).</span><br><span class="line">Get()</span><br><span class="line">&#125;</span><br><span class="line">watchFunc := <span class="function"><span class="keyword">func</span><span class="params">(options metav1.ListOptions)</span></span> (watch.Interface, <span class="type">error</span>) &#123;</span><br><span class="line">options.Watch = <span class="literal">true</span></span><br><span class="line">optionsModifier(&amp;options)</span><br><span class="line"><span class="keyword">return</span> c.Get().</span><br><span class="line">Namespace(namespace).</span><br><span class="line">Resource(resource).</span><br><span class="line">VersionedParams(&amp;options, metav1.ParameterCodec).</span><br><span class="line">Watch(context.Background())</span><br><span class="line">&#125;</span><br><span class="line">listFuncWithContext := <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, options metav1.ListOptions)</span></span> (runtime.Object, <span class="type">error</span>) &#123;</span><br><span class="line">optionsModifier(&amp;options)</span><br><span class="line"><span class="keyword">return</span> c.Get().</span><br><span class="line">Namespace(namespace).</span><br><span class="line">Resource(resource).</span><br><span class="line">VersionedParams(&amp;options, metav1.ParameterCodec).</span><br><span class="line">Do(ctx).</span><br><span class="line">Get()</span><br><span class="line">&#125;</span><br><span class="line">watchFuncWithContext := <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, options metav1.ListOptions)</span></span> (watch.Interface, <span class="type">error</span>) &#123;</span><br><span class="line">options.Watch = <span class="literal">true</span></span><br><span class="line">optionsModifier(&amp;options)</span><br><span class="line"><span class="keyword">return</span> c.Get().</span><br><span class="line">Namespace(namespace).</span><br><span class="line">Resource(resource).</span><br><span class="line">VersionedParams(&amp;options, metav1.ParameterCodec).</span><br><span class="line">Watch(ctx)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;ListWatch&#123;</span><br><span class="line">ListFunc:             listFunc,</span><br><span class="line">WatchFunc:            watchFunc,</span><br><span class="line">ListWithContextFunc:  listFuncWithContext,</span><br><span class="line">WatchFuncWithContext: watchFuncWithContext,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其核心的 list 和 watch 能力都是通过 Getter 来提供的，至于 Getter 是什么，我们接着分析。</p><p>Getter 接口定义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Getter <span class="keyword">interface</span> &#123;</span><br><span class="line">Get() *restclient.Request</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这里我们能看出，Getter 接口的 Get()方法返回的是 *restclient.Request 类型。至于 Request 怎么用直接见 ListWatch 的 new 函数就能看出。 </p><p>所以这里的new函数中的 c.Get() 其实就是 RESTClient.Get() 方法，返回的是 *rest.Request对象。</p><h3 id="2-2-Lister-和-Watcher-定义"><a href="#2-2-Lister-和-Watcher-定义" class="headerlink" title="2.2 Lister 和 Watcher 定义"></a>2.2 Lister 和 Watcher 定义</h3><p>我们接着分析 NewFilteredListWatchFromClient() 函数，其中的核心是 ListFunc 和 WatchFunc</p><p>Lister 对象是通过一个接口来定义的，代码见：<a href="https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/client-go/tools/cache/listwatch.go#L163">listwatch.go</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Lister <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// List 的返回值应该是一个 list 类型对象，也就是里面有 Items 字段，其中的 resourceVersion 可以用来 watch</span></span><br><span class="line">List(options metav1.ListOptions) (runtime.Object, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Watcher <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Watch 应该从指定的版本（即：resourceVersion）开始 watch</span></span><br><span class="line">Watch(options metav1.ListOptions) (watch.Interface, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListerWatcher <span class="keyword">interface</span> &#123;</span><br><span class="line">Lister</span><br><span class="line">Watcher</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 ListerWatcher 的接口包括了 Lister 和 Watcher 接口。</p><h3 id="2-3-List-和-Watch-的实现"><a href="#2-3-List-和-Watch-的实现" class="headerlink" title="2.3 List 和 Watch 的实现"></a>2.3 List 和 Watch 的实现</h3><p>有了对应的接口的定义后，List和Watch对应的一个实现的结构体定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ListWatch <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 这里的 ListFunc 和 WatchFunc 已经被标记为重复了，后序应该会主要使用 WithContext 版本的 List 和 Watch</span></span><br><span class="line">ListFunc ListFunc</span><br><span class="line">WatchFunc WatchFunc</span><br><span class="line"></span><br><span class="line">ListWithContextFunc  ListWithContextFunc</span><br><span class="line">WatchFuncWithContext WatchFuncWithContext</span><br><span class="line"></span><br><span class="line"><span class="comment">// DisableChunking requests no chunking for this list watcher.</span></span><br><span class="line">DisableChunking <span class="type">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改结构体分别实现了 List(), Watch() 等方法，这里以 List() 方法为例，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lw *ListWatch)</span></span> List(options metav1.ListOptions) (runtime.Object, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// ListWatch 在 Reflector 中已使用，而 Reflector 已支持分页，此处无需分页，以免重复</span></span><br><span class="line"><span class="keyword">if</span> lw.ListFunc != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> lw.ListFunc(options)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lw.ListWithContextFunc(context.Background(), options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 List() 方法其本质就是：位于 New 函数中的，通过 client 来发起的的一个GET请求。其中 List 和 Watch 不一样的点在于，List 最后调用了 Do() 方法，而 Watch 最后调用的是 Watch() 方法。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1. 背景&quot;&gt;&lt;/a&gt;1. 背景&lt;/h2&gt;&lt;p&gt;Kubernetes 中所有的API对象都是存储在Etcd中，且只能通过kube-apiserver访问。当访问量很大时，kube-apiserver会不堪重负。&lt;/p&gt;
&lt;p&gt;基于上述考虑，kubernetes 中引入了一个Informer机制，本质上是在内存中维护一个高效的缓存，客户端的读写请求都可以通过缓存实现，而不必全部穿透到kube-apiserver。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="http://zfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="http://zfeng.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Kubernetes源码解读" scheme="http://zfeng.github.io/tags/Kubernetes%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>client-go 源码解读（一）总述</title>
    <link href="http://zfeng.github.io/article/372617688925/"/>
    <id>http://zfeng.github.io/article/372617688925/</id>
    <published>2025-08-18T13:37:33.000Z</published>
    <updated>2025-08-22T12:56:54.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>最近工作中频繁用到 Informer、Controller 等相关组件，以及 List、Watch 等 API，为了更好地理解其工作原理，决定对 client-go 源码进行详细解读。</p><span id="more"></span><h2 id="2-client-go-架构"><a href="#2-client-go-架构" class="headerlink" title="2. client-go 架构"></a>2. client-go 架构</h2><p>在开始源码解读之前，先简单介绍一下 client-go 一些相关的结构，示意图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/2025/08/18/18210845.jpeg"></p><p>整个架构图分为上下两部分，其中上半部分为 client-go 的实现，而下半部分是我们自己要实现的 custom controller，每部分由不同的组件组成，上下两部分通过虚线连接起来。我们着重介绍下上半部分的组件，后续的源码解读也是基于上半部分架构图进行的。</p><ul><li><strong>Reflector</strong>：通过 List&amp;Watch 机制从 kube-apiserver 获取资源对象，并把数据放到 Delta FIFO 队列中；</li><li><strong>DeltaFIFO</strong>：Delta FIFO 是一个先进先出队列，用于存储 Reflector 从 kube-apiserver 获取到的资源对象的增量变化</li><li><strong>Informer</strong>：Informer 从 DeltaFIFO 中取出相应对象，然后通过 Indexer 将对象和索引丢到放入 cache 中，再触发相应的事件处理函数（Resource Event Handlers）运行；</li><li><strong>Indexer</strong>：主要提供一个对象根据一定条件检索的能力，典型的是通过 namespace&#x2F;name 来构造 key，通过 ThreadSafeStore 来存储对象</li><li><strong>Workqueue</strong>：Workqueue 一般使用的是延时队列实现，在 Resource Event Handlers 中会完成将对象的 key 放入 workqueue 的过程，然后我们在自己的逻辑代码里从 workqueue 中消费这些 key（架构图下半部分）；</li><li><strong>Resource Event Handlers</strong>：Resource Event Handlers 是 Informer 注册的回调函数，当 Informer 从 DeltaFIFO 中取出对象后，会根据对象的操作类型（Add&#x2F;Update&#x2F;Delete）调用对应的回调函数；</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1. 背景&quot;&gt;&lt;/a&gt;1. 背景&lt;/h2&gt;&lt;p&gt;最近工作中频繁用到 Informer、Controller 等相关组件，以及 List、Watch 等 API，为了更好地理解其工作原理，决定对 client-go 源码进行详细解读。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="http://zfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="http://zfeng.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Kubernetes源码解读" scheme="http://zfeng.github.io/tags/Kubernetes%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>夕阳</title>
    <link href="http://zfeng.github.io/article/b52011779fe6/"/>
    <id>http://zfeng.github.io/article/b52011779fe6/</id>
    <published>2025-08-15T12:53:28.000Z</published>
    <updated>2025-08-21T14:30:38.275Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🌇-今日暮色"><a href="#🌇-今日暮色" class="headerlink" title="🌇 今日暮色"></a>🌇 今日暮色</h2><p>周五的夕阳总带着特别的温柔，18:00准时合上电脑前往餐厅，在这个难得的准时下班的日子，我坐在餐厅里吃着晚餐，看着窗外的天空从白色慢慢变成了红色，夕阳的余晖在我的脑海中留下了一个美好的记忆。</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/2025/08/16/16170800.jpg"></p><p>踩着夕阳下班的感觉非常好！</p><h2 id="🌃-前夜随拍"><a href="#🌃-前夜随拍" class="headerlink" title="🌃 前夜随拍"></a>🌃 前夜随拍</h2><p>前夜加班时偶然撞见的惊喜–公司15楼阳台的灯火长卷！</p><p><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/2025/08/16/16170804.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;🌇-今日暮色&quot;&gt;&lt;a href=&quot;#🌇-今日暮色&quot; class=&quot;headerlink&quot; title=&quot;🌇 今日暮色&quot;&gt;&lt;/a&gt;🌇 今日暮色&lt;/h2&gt;&lt;p&gt;周五的夕阳总带着特别的温柔，18:00准时合上电脑前往餐厅，在这个难得的准时下班的日子，我坐在餐厅里吃着晚餐，看着窗外的天空从白色慢慢变成了红色，夕阳的余晖在我的脑海中留下了一个美好的记忆。&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="http://zfeng.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="http://zfeng.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>贵州之行</title>
    <link href="http://zfeng.github.io/article/6a6bae1e9eab/"/>
    <id>http://zfeng.github.io/article/6a6bae1e9eab/</id>
    <published>2025-08-13T13:46:20.000Z</published>
    <updated>2025-08-21T14:30:38.292Z</updated>
    
    <content type="html"><![CDATA[<p>2025.05.14-05.19趁着换工作中间休息的间隙，和朋友一起去了次贵州，行程共计五天。这短短几天的时间看到了不少的风景，也吃到了很多的美食，是从2022年4月份毕业后工作以来最轻松、休息的最好的一次。</p><span id="more"></span><h2 id="贵阳"><a href="#贵阳" class="headerlink" title="贵阳"></a>贵阳</h2><h3 id="贵阳美食"><a href="#贵阳美食" class="headerlink" title="贵阳美食"></a>贵阳美食</h3><p>贵阳的美食就像这座城市的气候一样，多变又带点惊喜。早晨一碗热气腾腾的肠旺面，酸辣开胃，瞬间唤醒味蕾，贵阳的糯米饭也是一绝，在街头巷尾的钢种小摊前，你会看到老板熟练地将糯米铺好，再撒上花生粉、折耳根、腊肉末，卷成一份香糯软糯的小幸福。</p><p>中午可以来份丝娃娃，用薄薄的米皮包上各种爽脆小菜，再淋上酸辣蘸水，酸得舒服辣得过瘾。贵阳人民对于午饭不是特别的重视，几个人在没有打听清楚的情况下去找烤鱼吃，然而店铺都没开门，最后还是本地的出租车司机告诉我们本地人不重视午饭，基本都是随便吃一点，很多店铺都是傍晚才开门。</p><p>晚饭对于贵阳人来说是非常的重要的，傍晚的大街小巷则弥漫着烤鱼、豆米火锅以及酸汤火锅的香气，鲜香麻辣让人停不下筷。无论是随意的小摊，还是用心的馆子，贵阳的味道，总能让人既满足又念念不忘</p><h3 id="贵阳街景"><a href="#贵阳街景" class="headerlink" title="贵阳街景"></a>贵阳街景</h3><p>贵阳的街景也充满了特色，古色古香的甲秀楼映照在清澈的南明河上，历史感扑面而来。青云市集的热闹景象扑面而来，摊位上琳琅满目的苗绣、手工艺品和地方美食，让人沉浸在浓郁的民族风情之中。<br><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/scenery20250816133510521.jpg"></p><p>早晨的黔灵山晨雾缭绕，青山叠翠与现代高楼遥相呼应。展现出一幅“山在城中、城在山中”的独特景象。</p><p><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/scenery20250816132958521.jpg"></p><p>黔灵山的动物也极具特色，一只非常像是熊猫的狗……</p><p><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/scenery20250816135608141.JPG"></p><h2 id="荔波"><a href="#荔波" class="headerlink" title="荔波"></a>荔波</h2><p>荔波，被誉为“林海秘境”，是一片充满原始生态美的净土。荔波小七孔被誉为“天然画廊”，以清澈的湖泊、奇特的喀斯特地貌和茂密的原始森林闻名。然而天公不作美，五月份的贵州一直是多雨天气，去之前正好连着下了好几天的雨，导致小七孔被淹，水也非常浑浊。不过在另一个地方看到了宝石绿的风景，也算是不虚此行。<br><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/scenery20250816135725210.jpg"></p><h2 id="安顺"><a href="#安顺" class="headerlink" title="安顺"></a>安顺</h2><p>第三天我们来到了安顺，这里也是一个兼具美食和美景的地方。这里有气势磅礴的黄果树瀑布，水流如银河般奔腾而下，激起万丈水雾，震撼人心</p><p><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/scenery20250816140629955.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/scenery20250816140725302.jpg"></p><p>除了美景，安顺的美食同样令人难忘，夺夺粉火锅、安顺裹卷以及烤小肠等特色美食让人吃一次就烙在记忆里。</p><p>18度的安顺非常是一个非常适合休闲以及品尝美食的好地方</p><p><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/scenery20250816141405227.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2025.05.14-05.19趁着换工作中间休息的间隙，和朋友一起去了次贵州，行程共计五天。这短短几天的时间看到了不少的风景，也吃到了很多的美食，是从2022年4月份毕业后工作以来最轻松、休息的最好的一次。&lt;/p&gt;</summary>
    
    
    
    <category term="旅行" scheme="http://zfeng.github.io/categories/%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="旅行" scheme="http://zfeng.github.io/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>西北大环线</title>
    <link href="http://zfeng.github.io/article/37f945ceda60/"/>
    <id>http://zfeng.github.io/article/37f945ceda60/</id>
    <published>2025-08-12T09:05:33.000Z</published>
    <updated>2025-08-21T14:30:38.287Z</updated>
    
    <content type="html"><![CDATA[<p>2025年的4月份对我来说是异常艰难的，不仅要完成当前的工作，还要顶着压力去面试新的公司。然而可能是因为第一份工作的方向过于底层，很多公司没有这个方向，导致找工作异常艰辛。前半个月基本没有进入第二轮面试的，都是一轮面试完就失败了。好在没有被挫折打败，坚持不断的去尝试新公司，新部门，终于在4月底时候迎来了好消息，龙芯中科和字节跳动先后拿到了意向书，算是可以稍微喘口气了。</p><span id="more"></span><p>拿到自己的意向书后，正好到了五一假期，于是趁着这段时间几个人去了期待已久的西北大环线，去感受下西北的雄浑壮阔。</p><h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><p>5月1日当天我们飞抵西宁，飞机快落地时，正好是晚上，从飞机舷窗上拍到了青海小城的夜景</p><p><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/IMG_3862.jpg"></p><p>入住的酒店周围就是一个夜市，虽然出门时候已经晚上十点了，然而夜市依然人头攒动。炕锅羊排、老酸奶青海的特色美食果然名不虚传。</p><h2 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2><p>今天的行程安排的比较满，一大早就从西宁出发出发前往青海湖，将近200km的路程对我们来说也就是眨眼之间。一路上的美景也是很震撼的，高原的天非常的蓝，雪山若隐若现，这些对于我这个第一次去高原的人来说是十分的新奇的。</p><p><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/IMG_3869.jpg"></p><p>随着距离青海湖越来越近，我们似乎闻到了空气中湖水的味道。黄色的视野中突然出现了一条蓝色的线，我们知道青海湖到了，高原上的湖碧蓝如洗，仿佛一块嵌在群山间的蓝宝石。</p><p><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/IMG_3873.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/IMG_3879.jpg"></p><p>青海湖结束后，下一站是茶卡盐湖，对于这个网上评价毁誉参半的湖，我们还是满怀期待的去了。然而实际情况却令我们大跌眼镜，可能是因为天气不太好的缘故，湖面完全没有网上说的天空之镜的样子，全是浑浊的水，而且收费非常贵，门票+小火车票一共要168元，真是令人大失所望。</p><h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2><p>第三天，我们的从德令哈出发去往大柴旦察尔汗盐湖、翡翠湖。说实话由于昨天的茶卡盐湖远远低于预期，我个人对于今天的行程已经不抱期待了。然而万万没想到的是，察尔汗盐湖却出人意料的漂亮。整个湖如同一面无边的镜子，碧绿澄澈，将天空与白云一并揽入怀中。<br><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/IMG_3900.jpg"></p><h2 id="Day4-5"><a href="#Day4-5" class="headerlink" title="Day4&#x2F;5"></a>Day4&#x2F;5</h2><p>第四五两天我们都安排在了敦煌，这座成立于汉武帝时期的城市，作为河西四郡之一，不仅是古丝绸之路上的交通要塞，更是东西方文明交流的重要枢纽。这里有被誉为“东方艺术明珠”的莫高窟，壁画与雕塑承载着千年的宗教信仰与文化记忆；这里也有鸣沙山与月牙泉的奇观，见证了大漠荒原中的生命奇迹。</p><p>路上还经过了黑独山，远远望去，群山漆黑如墨，起伏的山脊线在天光映照下显得格外冷峻。荒凉的戈壁与黑色山体交织在一起，仿佛一幅天然的水墨画徐徐展开，静默而大气。<br><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/adae648bbc5e37c717242a29b6eb6a4b.JPG"></p><p>下午3点左右我们抵达敦煌的酒店办理入住，稍作休息后直奔鸣沙山和月牙泉，去见证山泉共处，沙水共生的奇迹。</p><p><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/IMG_3933.jpg"></p><p>晚上的万人演唱会还请到了周深，有幸见证了一些盛大的场景。</p><p><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/IMG_3946.jpg"></p><p>第二天早上我们直奔莫高窟，去见证这座“沙漠中的艺术宝库”。这座开凿于前秦时间的石窟，最初只是僧侣们在大漠边缘开凿的供修行所在。然而随着历朝历代的不断完善，莫高窟已经成为一个跨越千年的艺术宝库。</p><p>在昏暗而安静的洞窟里，壁画与彩塑依旧色彩斑斓，仿佛跨越千年的时光与我们对视。那一尊尊佛像庄严而慈悲，壁画上的线条与色彩诉说着信仰、商旅与文明的交融。站在这里，仿佛能听见古丝路上驼铃声声，看见千年前人们往来不息的身影。</p><p><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/IMG_3949.jpg"></p><h2 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h2><p>随着形成进入尾声，大家也都有点累了。今天我们主要是从敦煌出发，乘坐高铁沿着河西走廊到达张掖。张掖作为河西四郡之一，同样成立于汉武帝时期，其名寓意“张国臂掖，以通西域”。在这里，我们走进张掖丹霞地貌景区，层叠的山峦仿佛泼洒了七彩颜料，赤、橙、黄、绿、青、蓝、紫交织成一幅壮丽画卷，宛如大自然的调色板。</p><p><img src="https://cdn.jsdelivr.net/gh/fengz63/picture@main/IMG_3980.jpg"></p><h2 id="Day7"><a href="#Day7" class="headerlink" title="Day7"></a>Day7</h2><p>从西宁出发踏上回程，至此七天的行程圆满结束。一路走来，从青海湖的碧波，到察尔汗盐湖的翠绿；从敦煌的千年壁画，到张掖丹霞的七彩山峦；从黑独山的水墨苍凉，到河西走廊的历史厚重……每一处风景都在心底留下了深深的烙印。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2025年的4月份对我来说是异常艰难的，不仅要完成当前的工作，还要顶着压力去面试新的公司。然而可能是因为第一份工作的方向过于底层，很多公司没有这个方向，导致找工作异常艰辛。前半个月基本没有进入第二轮面试的，都是一轮面试完就失败了。好在没有被挫折打败，坚持不断的去尝试新公司，新部门，终于在4月底时候迎来了好消息，龙芯中科和字节跳动先后拿到了意向书，算是可以稍微喘口气了。&lt;/p&gt;</summary>
    
    
    
    <category term="旅行" scheme="http://zfeng.github.io/categories/%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="旅行" scheme="http://zfeng.github.io/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 24.04 配置 Prometheus 和 Grafana 监控</title>
    <link href="http://zfeng.github.io/article/4c19da53a46d/"/>
    <id>http://zfeng.github.io/article/4c19da53a46d/</id>
    <published>2025-08-10T07:23:47.000Z</published>
    <updated>2025-08-21T14:30:38.268Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作中使用了 prometheus 数据采集搭配 grafana 监控，感觉监控使用很方便。于是趁着周末给自己家里的NAS上装了一个prometheus数据，在用grafana配合完成对个人NAS的性能监控。</p><span id="more"></span><h2 id="在宿主机上安装-Prometheus"><a href="#在宿主机上安装-Prometheus" class="headerlink" title="在宿主机上安装 Prometheus"></a>在宿主机上安装 Prometheus</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Ubuntu 默认的源里面就有 prometheus 的安装包，因此安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install prometheus</span><br></pre></td></tr></table></figure><p>检查 prometheus 相关服务是否启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl status prometheus</span></span><br><span class="line">● prometheus.service - Monitoring system and <span class="keyword">time</span> series database</span><br><span class="line">     Loaded: loaded (/usr/lib/systemd/system/prometheus.service; enabled; preset: enabled)</span><br><span class="line">     Active: active (running) since Sun 2025-08-10 09:50:12 CST; 5h 4min ago</span><br><span class="line">       Docs: https://prometheus.io/docs/introduction/overview/</span><br><span class="line">             man:prometheus(1)</span><br><span class="line">   Main PID: 1270424 (prometheus)</span><br><span class="line">      Tasks: 11 (<span class="built_in">limit</span>: 9223)</span><br><span class="line">     Memory: 111.7M (peak: 148.7M)</span><br><span class="line">        CPU: 2min 2.878s</span><br><span class="line">     CGroup: /system.slice/prometheus.service</span><br><span class="line">             └─1270424 /usr/bin/prometheus</span><br><span class="line"></span><br><span class="line">8月 10 13:00:05 zfeng prometheus[1270424]: ts=2025-08-10T05:00:05.181Z <span class="built_in">caller</span>=compact.go:523 level=info component=tsdb msg=<span class="string">&quot;write block&quot;</span> &gt;</span><br><span class="line">8月 10 13:00:05 zfeng prometheus[1270424]: ts=2025-08-10T05:00:05.188Z <span class="built_in">caller</span>=head.go:1293 level=info component=tsdb msg=<span class="string">&quot;Head GC complet&gt;</span></span><br><span class="line"><span class="string">8月 10 13:00:05 zfeng prometheus[1270424]: ts=2025-08-10T05:00:05.391Z caller=compact.go:464 level=info component=tsdb msg=&quot;</span>compact block&gt;</span><br><span class="line">8月 10 13:00:05 zfeng prometheus[1270424]: ts=2025-08-10T05:00:05.397Z <span class="built_in">caller</span>=db.go:1617 level=info component=tsdb msg=<span class="string">&quot;Deleting obsolete&gt;</span></span><br><span class="line"><span class="string">8月 10 13:00:05 zfeng prometheus[1270424]: ts=2025-08-10T05:00:05.402Z caller=db.go:1617 level=info component=tsdb msg=&quot;</span>Deleting obsolete&gt;</span><br><span class="line">8月 10 13:00:05 zfeng prometheus[1270424]: ts=2025-08-10T05:00:05.406Z <span class="built_in">caller</span>=db.go:1617 level=info component=tsdb msg=<span class="string">&quot;Deleting obsolete&gt;</span></span><br><span class="line"><span class="string">8月 10 13:00:05 zfeng prometheus[1270424]: ts=2025-08-10T05:00:05.714Z caller=compact.go:464 level=info component=tsdb msg=&quot;</span>compact block&gt;</span><br><span class="line">8月 10 13:00:05 zfeng prometheus[1270424]: ts=2025-08-10T05:00:05.722Z <span class="built_in">caller</span>=db.go:1617 level=info component=tsdb msg=<span class="string">&quot;Deleting obsolete&gt;</span></span><br><span class="line"><span class="string">8月 10 13:00:05 zfeng prometheus[1270424]: ts=2025-08-10T05:00:05.729Z caller=db.go:1617 level=info component=tsdb msg=&quot;</span>Deleting obsolete&gt;</span><br><span class="line">8月 10 13:00:05 zfeng prometheus[1270424]: ts=2025-08-10T05:00:05.736Z <span class="built_in">caller</span>=db.go:1617 level=info component=tsdb msg=<span class="string">&quot;Deleting obsolete&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到prometheus的控制端口是9090。此时在浏览器中访问服务器ip和9090端口，如果 prometheus 页面可以正常打开就说明安装完成：</p><p><img src="/images/prometheus_web_ui.png"></p><h2 id="在被监控节点安装-node-exporter"><a href="#在被监控节点安装-node-exporter" class="headerlink" title="在被监控节点安装 node-exporter"></a>在被监控节点安装 node-exporter</h2><p>也是直接从ubuntu源安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install prometheus-node-exporter</span><br></pre></td></tr></table></figure><p>检查 node-exporter 服务有没有启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl status prometheus-node-exporter</span></span><br><span class="line">● prometheus-node-exporter.service - Prometheus exporter <span class="keyword">for</span> machine metrics</span><br><span class="line">     Loaded: loaded (/usr/lib/systemd/system/prometheus-node-exporter.service; enabled; preset: enabled)</span><br><span class="line">     Active: active (running) since Sat 2025-08-09 18:30:39 CST; 20h ago</span><br><span class="line">       Docs: https://github.com/prometheus/node_exporter</span><br><span class="line">   Main PID: 1221924 (prometheus-node)</span><br><span class="line">      Tasks: 6 (<span class="built_in">limit</span>: 9223)</span><br><span class="line">     Memory: 10.6M (peak: 12.2M)</span><br><span class="line">        CPU: 24min 7.150s</span><br><span class="line">     CGroup: /system.slice/prometheus-node-exporter.service</span><br><span class="line">             └─1221924 /usr/bin/prometheus-node-exporter <span class="string">&quot;--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|run)(\$|/)&quot;</span> <span class="string">&quot;--coll&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">8月 09 18:30:39 zfeng prometheus-node-exporter[1221924]: ts=2025-08-09T10:30:39.940Z caller=node_exporter.go:117 level=info collector=the&gt;</span></span><br><span class="line"><span class="string">8月 09 18:30:39 zfeng prometheus-node-exporter[1221924]: ts=2025-08-09T10:30:39.940Z caller=node_exporter.go:117 level=info collector=time</span></span><br><span class="line"><span class="string">8月 09 18:30:39 zfeng prometheus-node-exporter[1221924]: ts=2025-08-09T10:30:39.940Z caller=node_exporter.go:117 level=info collector=tim&gt;</span></span><br><span class="line"><span class="string">8月 09 18:30:39 zfeng prometheus-node-exporter[1221924]: ts=2025-08-09T10:30:39.940Z caller=node_exporter.go:117 level=info collector=udp&gt;</span></span><br><span class="line"><span class="string">8月 09 18:30:39 zfeng prometheus-node-exporter[1221924]: ts=2025-08-09T10:30:39.940Z caller=node_exporter.go:117 level=info collector=una&gt;</span></span><br><span class="line"><span class="string">8月 09 18:30:39 zfeng prometheus-node-exporter[1221924]: ts=2025-08-09T10:30:39.940Z caller=node_exporter.go:117 level=info collector=vms&gt;</span></span><br><span class="line"><span class="string">8月 09 18:30:39 zfeng prometheus-node-exporter[1221924]: ts=2025-08-09T10:30:39.940Z caller=node_exporter.go:117 level=info collector=xfs</span></span><br><span class="line"><span class="string">8月 09 18:30:39 zfeng prometheus-node-exporter[1221924]: ts=2025-08-09T10:30:39.940Z caller=node_exporter.go:117 level=info collector=zfs</span></span><br><span class="line"><span class="string">8月 09 18:30:39 zfeng prometheus-node-exporter[1221924]: ts=2025-08-09T10:30:39.941Z caller=tls_config.go:313 level=info msg=&quot;</span>Listening o&gt;</span><br><span class="line">8月 09 18:30:39 zfeng prometheus-node-exporter[1221924]: ts=2025-08-09T10:30:39.941Z <span class="built_in">caller</span>=tls_config.go:316 level=info msg=<span class="string">&quot;TLS is disa&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到 node-exporter 监控的端口号是 9100。</p><h2 id="配置监控机的-prometheus-xml-加入被监控的节点"><a href="#配置监控机的-prometheus-xml-加入被监控的节点" class="headerlink" title="配置监控机的 prometheus.xml 加入被监控的节点"></a>配置监控机的 prometheus.xml 加入被监控的节点</h2><p>打开<code>/etc/prometheus/prometheus.yml</code>文件，编辑对应位置，加入节点配置，如下：<br><img src="/images/prometheus_server_config.png"><br>然后重启服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart prometheus</span><br></pre></td></tr></table></figure><p>再打开 prometheus 的监控列表，发现已有两个节点被监控了，包括监控机本身：</p><p><img src="/images/prometheus_web_ui_2.png"></p><h2 id="安装-Grafana"><a href="#安装-Grafana" class="headerlink" title="安装 Grafana"></a>安装 Grafana</h2><p>Ubuntu 默认源中没有 grafana 的安装包，因此需要添加对应的源。国内可以用清华源代替，详细见：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/grafana/">添加 Grafana 软件仓库</a></p><p>安装完后检查服务是否启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl status grafana-server</span></span><br><span class="line">● grafana-server.service - Grafana instance</span><br><span class="line">     Loaded: loaded (/usr/lib/systemd/system/grafana-server.service; disabled; preset: enabled)</span><br><span class="line">     Active: active (running) since Sat 2025-08-09 18:00:09 CST; 21h ago</span><br><span class="line">       Docs: http://docs.grafana.org</span><br><span class="line">   Main PID: 1219957 (grafana)</span><br><span class="line">      Tasks: 19 (<span class="built_in">limit</span>: 9223)</span><br><span class="line">     Memory: 122.9M (peak: 158.3M)</span><br><span class="line">        CPU: 11min 21.470s</span><br><span class="line">     CGroup: /system.slice/grafana-server.service</span><br><span class="line">             └─1219957 /usr/share/grafana/bin/grafana server --config=/etc/grafana/grafana.ini --pidfile=/run/grafana/grafana-server.pid &gt;</span><br><span class="line"></span><br><span class="line">8月 10 15:00:22 zfeng grafana[1219957]: logger=cleanup t=2025-08-10T15:00:22.049771001+08:00 level=info msg=<span class="string">&quot;Completed cleanup jobs&quot;</span> dura&gt;</span><br><span class="line">8月 10 15:00:23 zfeng grafana[1219957]: logger=plugins.update.checker t=2025-08-10T15:00:23.431751891+08:00 level=info msg=<span class="string">&quot;Update check &gt;</span></span><br><span class="line"><span class="string">8月 10 15:01:28 zfeng grafana[1219957]: logger=infra.usagestats t=2025-08-10T15:01:28.986667313+08:00 level=info msg=&quot;</span>Usage stats are rea&gt;</span><br><span class="line">8月 10 15:10:22 zfeng grafana[1219957]: logger=cleanup t=2025-08-10T15:10:22.020334022+08:00 level=info msg=<span class="string">&quot;Completed cleanup jobs&quot;</span> dura&gt;</span><br><span class="line">8月 10 15:10:23 zfeng grafana[1219957]: logger=plugins.update.checker t=2025-08-10T15:10:23.51111745+08:00 level=info msg=<span class="string">&quot;Update check s&gt;</span></span><br><span class="line"><span class="string">8月 10 15:20:22 zfeng grafana[1219957]: logger=cleanup t=2025-08-10T15:20:22.022565084+08:00 level=info msg=&quot;</span>Completed cleanup <span class="built_in">jobs</span><span class="string">&quot; dura&gt;</span></span><br><span class="line"><span class="string">8月 10 15:20:23 zfeng grafana[1219957]: logger=plugins.update.checker t=2025-08-10T15:20:23.415660356+08:00 level=info msg=&quot;</span>Update check &gt;</span><br><span class="line">8月 10 15:30:22 zfeng grafana[1219957]: logger=cleanup t=2025-08-10T15:30:22.047368654+08:00 level=info msg=<span class="string">&quot;Completed cleanup jobs&quot;</span> dura&gt;</span><br><span class="line">8月 10 15:30:23 zfeng grafana[1219957]: logger=plugins.update.checker t=2025-08-10T15:30:23.469371479+08:00 level=info msg=<span class="string">&quot;Update check &gt;</span></span><br><span class="line"><span class="string">8月 10 15:31:28 zfeng grafana[1219957]: logger=infra.usagestats t=2025-08-10T15:31:28.98688322+08:00 level=info msg=&quot;</span>Usage stats are <span class="built_in">read</span>&gt;</span><br></pre></td></tr></table></figure><p>默认情况下是已经启动的，如果没启动，手动启动就好。grafana 服务默认监控端口是 3000，从浏览器中输入 ip:3000，如果能显示 grafana 页面表示一切正常。</p><h2 id="配置-Grafana"><a href="#配置-Grafana" class="headerlink" title="配置 Grafana"></a>配置 Grafana</h2><p>Grafana 默认的账号和密码都是 admin，先登录。</p><h3 id="添加数据源"><a href="#添加数据源" class="headerlink" title="添加数据源"></a>添加数据源</h3><p>打开 Web UI，进入：<code>Connections-&gt;Data Sources</code>，点击 <code>Add new data source</code> 按钮:<br><img src="/images/grafana_1.png"><br>选择 Prometheus：<br><img src="/images/grafana_2.png"><br>修改 Connection 选项中对应的地址，改为 prometheus server 对应的地址即可。<br><img src="/images/grafana_3.png"></p><h3 id="添加-Dashboard"><a href="#添加-Dashboard" class="headerlink" title="添加 Dashboard"></a>添加 Dashboard</h3><p>Dashboard 添加有现成的模版，可以去这里找：<a href="https://grafana.com/grafana/dashboards/?search=8919">https://grafana.com/grafana/dashboards/?search=8919</a>。</p><p><img src="/images/grafana_dashboard.png"></p><p>选择 Linux 主机详情下载对应的json文件即可。</p><p>下载完成后在 grafana Web UI 中<code>New-&gt;Import</code>选择刚才下载的 json 文件即可得到一个比较完善的 Linux 主机详情监控面板了：</p><p><img src="/images/grafana_dashboard_2.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近工作中使用了 prometheus 数据采集搭配 grafana 监控，感觉监控使用很方便。于是趁着周末给自己家里的NAS上装了一个prometheus数据，在用grafana配合完成对个人NAS的性能监控。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="http://zfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="http://zfeng.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>重庆之行</title>
    <link href="http://zfeng.github.io/article/d8644e889782/"/>
    <id>http://zfeng.github.io/article/d8644e889782/</id>
    <published>2025-01-02T21:02:20.000Z</published>
    <updated>2025-08-21T14:30:38.298Z</updated>
    
    <content type="html"><![CDATA[<p>2024年12月21日和22日进行了为期两天的重庆之行。</p><span id="more"></span><p>早上6点45的飞机让我一大早起来开车去机场，停车、安检、候机，等坐在飞机上那一刻已经是6点15了，虽然非常困，但是想着马上可以去自己想去的地方还是蛮开心的。<br>飞机上看到了非常壮观的云层<br><img src="/images/chongqing_20231221_1.jpg"></p><p>晚上吃完火锅后在千斯门大桥旁边看到了美丽的夜景<br><img src="/images/chongqing_20231221_2.jpg"></p><p>沿江边漫步，感觉非常的惬意舒适，不得不说，重庆相对于杭州来说还是非常适合生活的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2024年12月21日和22日进行了为期两天的重庆之行。&lt;/p&gt;</summary>
    
    
    
    <category term="旅行" scheme="http://zfeng.github.io/categories/%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="旅行" scheme="http://zfeng.github.io/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>新年快乐</title>
    <link href="http://zfeng.github.io/article/6b4a87f41aa8/"/>
    <id>http://zfeng.github.io/article/6b4a87f41aa8/</id>
    <published>2025-01-01T15:24:09.000Z</published>
    <updated>2025-08-21T14:30:38.281Z</updated>
    
    <content type="html"><![CDATA[<h3 id="新年第一天"><a href="#新年第一天" class="headerlink" title="新年第一天"></a>新年第一天</h3><p>今天是2025年1月1日，新年的第一天，今天开始打算维护一个自己的博客，这是开始。<br>不管怎么说，新的一年，希望事事顺心，新年快乐！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;新年第一天&quot;&gt;&lt;a href=&quot;#新年第一天&quot; class=&quot;headerlink&quot; title=&quot;新年第一天&quot;&gt;&lt;/a&gt;新年第一天&lt;/h3&gt;&lt;p&gt;今天是2025年1月1日，新年的第一天，今天开始打算维护一个自己的博客，这是开始。&lt;br&gt;不管怎么说，新的一年，希望</summary>
      
    
    
    
    <category term="生活" scheme="http://zfeng.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="http://zfeng.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
